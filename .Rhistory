newdata.cbin(prob = prob)
newdata.cbind(prob = prob)
newdata = with(case2002, data.frame(BK = factor(c('Bird', 'NoBird')),
YR = c(rep(mean(YR), 2), 0, 0)))
eXB = exp(predict(log_BK_YR, newdata))
prob = eXB / (1 + eXB)
cbind(newdata, 'probability' = prob)
round(log_BK_YR$fitted.values)
round(log_BK_YR$fitted.values, 2)
round(log_BK_YR$fitted.values, 3)
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
pchisq(log_BK_YR$deviance,
log_BK_YR$df.residual,
lower.tail = FALSE)
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
pchisq(log_BK_YR$deviance,
log_BK_YR$df.residual,
lower.tail = FALSE)
newdata
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
pchisq(log_BK_YR$deviance,
log_BK_YR$df.residual,
lower.tail = FALSE)
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
pchisq(log_BK_YR$deviance,
log_BK_YR$df.residual,
lower.tail = FALSE)
cat('probability' = (85 + 22) / (27 + 13))
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
pchisq(log_BK_YR$deviance,
log_BK_YR$df.residual,
lower.tail = FALSE)
cat('probability' = (85 + 22) / (27 + 13))
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
pchisq(log_BK_YR$deviance,
log_BK_YR$df.residual,
lower.tail = FALSE)
cat('probability' = (85 + 22) / (27 + 13 + 85 + 22))
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
pchisq(log_BK_YR$deviance,
log_BK_YR$df.residual,
lower.tail = FALSE)
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
sum(diag(confusion.max)) / nrow(case2002)
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
sum(diag(confusion.mat)) / nrow(case2002)
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
sum(diag(confusion)) / nrow(case2002)
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
# 40 / 147 wrong, aka 27%! this is really high and shows that the model does not fit too well
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
case2002 %>%
group_by(LC) %>%
summarise(ratio = n())
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
case2002 %>%
group_by(LC) %>%
summarise(ratio = n() / count())
length(case2002)
dim(case2002)
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
case2002 %>%
group_by(LC) %>%
summarise(ratio = n() / dim(case2002)[0])
case2002 %>%
group_by(LC) %>%
summarise(ratio = n())
case2002 %>%
group_by(LC) %>%
summarise(ratio = n() / dim(case2002)[0])
dim(case2002)[0]
dim(case2002)[0]
dim(case2002)[0]
dim(case2002)[0]
confusion = table(truth = case2002$LC, round(log_BK_YR$fitted.values))
cat('probability', (85 + 22) / (27 + 13 + 85 + 22))
case2002 %>%
group_by(LC) %>%
summarise(ratio = n() / dim(case2002)[1])
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
neg_log_likelihood<-function(intercept, slope){
neg_log_likelihood = -log(intercept + ln(slope))
}
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
neg_log_likelihood(-1, -1)
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
}
neg_log_likelihood(-1, -1)
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
neg_log_likelihood(-1, -1)
return prob
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
likelihood = (prob * case2002$YR) / (1 - prob(case2002$YR))
return(-log(likelihood))
}
neg_log_likelihood(-1, -1)
return(-log(likelihood))
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
likelihood = (prob * case2002$YR) / (1 - prob(case2002$YR))
return(-log(likelihood))
}
neg_log_likelihood(-1, -1)
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
likelihood = (prob * case2002$YR) / (1 - prob * case2002$YR)
return(-log(likelihood))
}
neg_log_likelihood(-1, -1)
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
likelihood = (prob * case2002$YR) / (1 - prob * case2002$YR)
return(-log(min(likelihood)))
}
neg_log_likelihood(-1, -1)
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
likelihood = (prob * case2002$YR) / (1 - prob * case2002$YR)
return(min(-log(likelihood)))
}
neg_log_likelihood(-1, -1)
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
#Should give the intercept and the slope very close to the result from:
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
prob = ifelse(case2002$LC == 'LungCancer', prob, (1 - prob))
-sum(log(prob))
}
neg_log_likelihood(-1, -1)
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
#Should give the intercept and the slope very close to the result from:
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
neg_log_likelihood<-function(intercept, slope){
log_odd = intercept + slope * case2002$YR
prob = (1 / (1 + exp(-log_odd)))
prob = ifelse(case2002$LC == 'LungCancer', prob, (1 - prob))
-sum(log(prob))
}
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
#Should give the intercept and the slope very close to the result from:
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(tidyverse)
# add city and state columns to all dataframes
filename = list.files(pattern = '*.csv', full.names = TRUE)
cities = gsub('\\./|\\.csv', '', filename)
names(cities) = c('NC', 'TX', 'MA', 'FL', 'MA', 'IL', 'NV', 'OH', 'TX',
'CO', 'TX', 'HI', 'NJ', 'CA', 'CA', 'TN', 'AK', 'NJ',
'NY', 'CA', 'CA', 'OR', 'RI', 'MA', 'CA', 'CA', 'CA',
'CA', 'CA', 'WA', 'MN', 'DC')
for (file in filename) {
city = gsub('\\./|2?\\.csv', '', file)
state = names(cities)[cities == city]
df = read_csv(file, show_col_types = FALSE)
df %>%
mutate(city = city,
state = state) %>%
write_csv(file)
}
# combine all cities into one dataframe
df_raw = filename %>%
lapply(read_csv, col_types = cols(.default = 'c')) %>%
bind_rows
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
# and removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text, price))
df
df = df %>%
mutate(description = str_count(description, '\\s+') + 1, #num_words
host_about = str_count(host_about, '\\s+') + 1, #num_words
name_len = str_length(name),
host_since = as.Date(host_since, '%m/%d/%y'),
host_response_rate = as.numeric(gsub('%|N/A', '', host_response_rate)),
host_acceptance_rate = as.numeric(gsub('%|N/A', '', host_acceptance_rate)),
host_response_time = factor(host_response_time),
host_total_listings_count = as.numeric(host_total_listings_count),
num_verification = str_count(host_verifications, "'") / 2,
accommodates = as.numeric(accommodates),
bedrooms = as.numeric(bedrooms),
beds = as.numeric(beds),
bathrooms = as.numeric(ifelse(grepl('half-bath', bathrooms_text),
0.5, gsub('[^0-9.]', '',bathrooms_text))),
bathrooms_text = factor(ifelse(grepl('hared', bathrooms_text),
'shared', 'private')),
amenities_count = str_count(amenities, '"') / 2,
minimum_nights = as.numeric(minimum_nights),
maximum_nights = as.numeric(maximum_nights),
price = as.numeric(gsub('\\$','', price)),
minimum_nights_avg_ntm = as.numeric(minimum_nights_avg_ntm),
maximum_nights_avg_ntm = as.numeric(maximum_nights_avg_ntm),
number_of_reviews = as.numeric(number_of_reviews),
last_review = as.Date(last_review, '%m/%d/%y'),
review_scores_rating = as.numeric(review_scores_rating),
review_scores_accuracy = as.numeric(review_scores_accuracy),
review_scores_cleanliness = as.numeric(review_scores_cleanliness),
review_scores_checkin = as.numeric(review_scores_checkin),
review_scores_communication = as.numeric(review_scores_communication),
review_scores_location = as.numeric(review_scores_location),
review_scores_value = as.numeric(review_scores_value),
reviews_per_month = as.numeric(reviews_per_month),
num_hosts = str_count(host_name, 'and|And|\\&') + 1)
df
summary(df)
df
df %>%
ggplot(aes(price, reorder(state, price))) +
geom_boxplot(aes(color = state), show.legend = FALSE) +
labs(title = 'Average Cost by State',
x = 'Price per night (USD)',
y = 'State',
color = FALSE)
ggsave('AirBNB Cost by State - Boxplot.png', width = 10, height = 6)
unique(df$price)
is.na(df$price)
df[df$price == is.na(df$price)]
df[is.na(df$price)]
df[[is.na(df$price)]]
df %>%
filter(is.na(df$price))
# and removing na from selected columns
df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text)) %>%
filter(price == 'NA')
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
# and removing na from selected columns
df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text)) %>%
filter(price == 'NA')
df
unique(df$price)
df = df %>%
mutate(description = str_count(description, '\\s+') + 1, #num_words
host_about = str_count(host_about, '\\s+') + 1, #num_words
name_len = str_length(name),
host_since = as.Date(host_since, '%m/%d/%y'),
host_response_rate = as.numeric(gsub('%|N/A', '', host_response_rate)),
host_acceptance_rate = as.numeric(gsub('%|N/A', '', host_acceptance_rate)),
host_response_time = factor(host_response_time),
host_total_listings_count = as.numeric(host_total_listings_count),
num_verification = str_count(host_verifications, "'") / 2,
accommodates = as.numeric(accommodates),
bedrooms = as.numeric(bedrooms),
beds = as.numeric(beds),
bathrooms = as.numeric(ifelse(grepl('half-bath', bathrooms_text),
0.5, gsub('[^0-9.]', '',bathrooms_text))),
bathrooms_text = factor(ifelse(grepl('hared', bathrooms_text),
'shared', 'private')),
amenities_count = str_count(amenities, '"') / 2,
minimum_nights = as.numeric(minimum_nights),
maximum_nights = as.numeric(maximum_nights),
price = as.numeric(gsub('\\$','', price)),
minimum_nights_avg_ntm = as.numeric(minimum_nights_avg_ntm),
maximum_nights_avg_ntm = as.numeric(maximum_nights_avg_ntm),
number_of_reviews = as.numeric(number_of_reviews),
last_review = as.Date(last_review, '%m/%d/%y'),
review_scores_rating = as.numeric(review_scores_rating),
review_scores_accuracy = as.numeric(review_scores_accuracy),
review_scores_cleanliness = as.numeric(review_scores_cleanliness),
review_scores_checkin = as.numeric(review_scores_checkin),
review_scores_communication = as.numeric(review_scores_communication),
review_scores_location = as.numeric(review_scores_location),
review_scores_value = as.numeric(review_scores_value),
reviews_per_month = as.numeric(reviews_per_month),
num_hosts = str_count(host_name, 'and|And|\\&') + 1)
df
unique(df$price)
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df %>%
mutate(price = gsub(',', '', price))
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df %>%
mutate(price = gsub(',', '', price)) %>%
distinct(price)
# removing all commas for price
df %>%
mutate(price = as.numeric(gsub(',', '', price)))
# removing all commas for price
df %>%
mutate(price = as.numeric(gsub(',', '', price))) %>%
distinct(price)
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df %>%
mutate(price = gsub(',|$', '', price)) %>%
distinct(price)
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df %>%
mutate(price = gsub(',&$', '', price)) %>%
distinct(price)
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df %>%
mutate(price = gsub(',\|\\$', '', price)) %>%
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df %>%
mutate(price = gsub(',|\\$', '', price)) %>%
distinct(price)
# removing all commas for price
df %>%
mutate(price = as.numeric(gsub(',|\\$', '', price))) %>%
distinct(price)
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df = df %>%
mutate(price = as.numeric(gsub(',|\\$', '', price))) %>%
distinct(price)
df
# removing columns we don't need
df = df_raw %>%
select(-c(2:3, 9, 15:16, 23, 27, 35:38, 41:45, 47, 49:51, 61:64, 68:77))
#removing na from selected columns
df = df %>%
drop_na(c(description, host_since, bedrooms, beds, bathrooms_text))
# removing all commas for price
df = df %>%
mutate(price = as.numeric(gsub(',|\\$', '', price)))
df
unique(df$price)
na.omit(df$price)
is.na(df$price)
df %>%
mutate_at(c(review_scores_rating, review_scores_accuracy,
review_scores_cleanliness, review_scores_checkin,
review_scores_communication, review_scores_location,
review_scores_value, reviews_per_month), as.numeric)
df %>%
mutate_at(c('review_scores_rating', review_scores_accuracy,
review_scores_cleanliness, review_scores_checkin,
review_scores_communication, review_scores_location,
review_scores_value, reviews_per_month), as.numeric)
df %>%
mutate(as_numeric(c(review_scores_rating, review_scores_accuracy,
review_scores_cleanliness, review_scores_checkin,
review_scores_communication, review_scores_location,
review_scores_value, reviews_per_month)))
df %>%
mutate(as.numeric(c(review_scores_rating, review_scores_accuracy,
review_scores_cleanliness, review_scores_checkin,
review_scores_communication, review_scores_location,
review_scores_value, reviews_per_month)))
df %>%
mutate_at(c('review_scores_rating', 'review_scores_accuracy',
'review_scores_cleanliness', 'review_scores_checkin',
'review_scores_communication', 'review_scores_location',
'review_scores_value', 'reviews_per_month'), as.numeric)
df %>%
mutate_at(c('review_scores_rating', 'review_scores_accuracy',
'review_scores_cleanliness', 'review_scores_checkin',
'review_scores_communication', 'review_scores_location',
'review_scores_value', 'reviews_per_month', 'accommodates',
'bedrooms', 'beds', 'minimum_nights', 'maximum_nights',
'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm',
'number_of_reviews', 'host_total_listings_count'),
as.numeric)
df %>%
across(c('review_scores_rating', 'review_scores_accuracy',
'review_scores_cleanliness', 'review_scores_checkin',
'review_scores_communication', 'review_scores_location',
'review_scores_value', 'reviews_per_month', 'accommodates',
'bedrooms', 'beds', 'minimum_nights', 'maximum_nights',
'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm',
'number_of_reviews', 'host_total_listings_count'), as.numeric)
'host_response_rate', 'host_acceptance_rate', as.numeric)
df %>%
mutate(host_response_rate = gsub('%|N/A', '', host_response_rate),
host_acceptance_rate = gsub('%|N/A', '', host_acceptance_rate),
bathrooms = ifelse(grepl('half-bath', bathrooms_text),
0.5, gsub('[^0-9.]', '',bathrooms_text))) %>%
mutate_at(c('review_scores_rating', 'review_scores_accuracy',
'review_scores_cleanliness', 'review_scores_checkin',
'review_scores_communication', 'review_scores_location',
'review_scores_value', 'reviews_per_month', 'accommodates',
'bedrooms', 'beds', 'minimum_nights', 'maximum_nights',
'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm',
'number_of_reviews', 'host_total_listings_count', 'bathrooms',
'host_response_rate', 'host_acceptance_rate', as.numeric))
df %>%
mutate(host_response_rate = gsub('%|N/A', '', host_response_rate),
host_acceptance_rate = gsub('%|N/A', '', host_acceptance_rate),
bathrooms = ifelse(grepl('half-bath', bathrooms_text),
0.5, gsub('[^0-9.]', '',bathrooms_text))) %>%
mutate_at(c('review_scores_rating', 'review_scores_accuracy',
'review_scores_cleanliness', 'review_scores_checkin',
'review_scores_communication', 'review_scores_location',
'review_scores_value', 'reviews_per_month', 'accommodates',
'bedrooms', 'beds', 'minimum_nights', 'maximum_nights',
'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm',
'number_of_reviews', 'host_total_listings_count', 'bathrooms',
'host_response_rate', 'host_acceptance_rate'), as.numeric)
df %>%
mutate_at(c('price', 'host_acceptance_rate', 'host_response_rate'),
gsub(',|\\$|%|N/A', '', .x))
df %>%
mutate_at(c('price', 'host_acceptance_rate', 'host_response_rate'),
gsub(',|\\$|%|N/A', '', .))
